# CUDA Compilation Justfile
# Architecture: sm_90a with all optimizations enabled
#
# Usage:
#   just           - Build with cu12 environment (default)
#   just cu12      - Build with cu12 environment
#   just cu13      - Build with cu13 environment
#   PIXI_ENV=cu13 just build - Override environment

# Variables
pixi_env := env_var_or_default("PIXI_ENV", "cu12")
nvcc := if `which pixi > /dev/null 2>&1; echo $?` == "0" { "pixi run -e " + pixi_env + " nvcc" } else { "nvcc" }
python := if `which pixi > /dev/null 2>&1; echo $?` == "0" { "pixi run -e " + pixi_env + " python" } else { "python" }
arch := "compute_90a"
code := "sm_90a"
optimization_flags := "-O3"

# Default recipe
default: build benchmark

# Environment-specific targets
cu12:
	PIXI_ENV=cu12 just build benchmark

cu13:
	PIXI_ENV=cu13 just build benchmark

# Compile wrapped_kernel.cu into a shared library
so:
	{{nvcc}} -gencode=arch={{arch}},code={{code}} {{optimization_flags}} -shared -Xcompiler -fPIC -lcuda -o libwrapped_kernel.so wrapped_kernel.cu

# Build
build: so

# Format code
fmt:
	{{python}} -m isort .
	{{python}} -m autopep8 --in-place --recursive .

# Run benchmark
benchmark:
	{{python}} main.py

# Profiling
profile:
	nsys profile -o nsys -f true -t nvtx,cuda,osrt {{python}} main.py

# Clean targets
clean:
	rm -f libwrapped_kernel.so
